function Osmbuilding(map, dataurl){
  var osmb = {};
  osmb.map = map;
  osmb.heatmapLayer = null;
  osmb.radius = 0.01;
  osmb.config = {
    map : {
      maxZoom : 18,
      minZoom : 5
    }
  };

  osmb.config.building = {
    radius : 0.01,
    top : 700,
    colors : ["#DCD2D0","#67FEC1","#AABAD7","#F4FE00","#F4FE00","#F57D0D","#FA0E1B"],
    // 200p  0.001
    // dataUrl:"rectHeat/",
    // maxCount : 10000

    dataUrl : dataurl + "build/",
    // dataUrl : dataurl + "2",
    maxCount : 70000
  };

  osmb.config.heatmap = {
    radius : 0.01,
    dataUrl : dataurl + "heat/",
    // dataUrl : dataurl + "1",
    maxCount : 10000,
    top : 1000,
    colors : ["#DCD2D0","#67FEC1","#AABAD7","#F4FE00","#F57D0D","#FA0E1B"],

  };

// {
//   time : "18520n",
//   min : 100,
//   distance : 0.01
// }
  osmb.building = function(params){
    osmb.clearMap();
    var min = params.min === undefined ? 100 : params.min;
    var num = params.time === undefined ? "000" : params.time;
    var distance = params.distance === undefined ? 0.01 : params.distance;
    osmb.heatmap(params.time);
    var config = osmb.config.building;
    $.ajax({
      type: "get",
      url: config.dataUrl + num + ".json",
      success: function(result) {
        osmb.buildings = new OSMBuildings(osmb.map).date(new Date('2015-07-15 10:00:00'));
        osmb.buildings.set(osmb.getBuildData(result, min, distance));
        $('.dimmer').css('display','none');
      }
    });
  }

  osmb.heatmap = function(time){
    // time = "200p";
    osmb.clearMap();
    var config = osmb.config.heatmap;
    $.ajax({
                       type: "get",
                       url: config.dataUrl+time+".json",
                       success: function (result) {
                         // transform data for heapmap.js to read
                         for (var i = 0; i < result.length; i++) {
                           var tmp = {
                             "lat" : result[i].geometry.rings[0][0][1].toFixed(5),
                             "lng" : result[i].geometry.rings[0][0][0].toFixed(5),
                            //  "count" : result[i].attributes.c
                             "count" : osmb.getNewCount(result[i].attributes.c)
                           };
                           result[i] = tmp;
                         }


                         osmb.setHeatMap({
                           max : 10,
                           data : result
                         });
                       }
                   });
  }

  osmb.getBuildData = function(srcData, min, distance){
    var config = osmb.config.building;
    var dataArr = {
      "type":"FeatureCollection",
      "features":[]
    };
    var radius = distance;
    radius += 0;
    for (var i = 0; i < srcData.length; i++) {
      var data = srcData[i];
      var tmp = {
        "count" : data.attributes.c,
        "lng" : ((data.geometry.rings[0][0][0] + data.geometry.rings[0][2][0])/2).toFixed(5),
        "lat" : ((data.geometry.rings[0][0][1] + data.geometry.rings[0][1][1])/2).toFixed(5)
      }
      var precent = (tmp.count / config.maxCount).toFixed(4) ;
      var height = config.top * precent;
      if (height < 10) {
        height = 10;
      }
      if (tmp.count > config.maxCount) {
        config.maxCount = tmp.count;
      }
      if (tmp.count > min) {
        var colorIndex = Math.round((config.colors.length - 1) * precent);
        var Building = {
          "type":"Feature",
          "properties":{
            "color": osmb.getColor(tmp.count),
            "height": height ,
            "roofColor" : config.colors[
              osmb.conrect(colorIndex, config.colors.length)],
            "wallColor" : "#696969"
          },"geometry":{
            "type":"Polygon",
            "coordinates":[[
              [tmp.lng, tmp.lat],
              [tmp.lng - radius, tmp.lat],
              [tmp.lng - radius, tmp.lat - radius],
              [tmp.lng, tmp.lat - radius],
              [tmp.lng, tmp.lat]
            ]]
          }
        };
        dataArr.features.push(Building);
      }
    }
    // console.log(config.maxCount);
    return dataArr;
  }

  // osmb.setHeatMap = function(heatmapData){
  //         if(osmb.heatmapLayer != null){
  //             osmb.map.removeLayer(osmb.heatmapLayer);
  //         }
  //         var config = {  //热力图的配置项
  //             // radius: 0.02,       //设置每一个热力点的半径
  //             radius : osmb.radius,
  //             maxOpacity: .8,        //设置最大的不透明度
  //             // minOpacity: 0.3,     //设置最小的不透明度
  //             scaleRadius: true,      //设置热力点是否平滑过渡
  //             // blur: 0.95,             //系数越高，渐变越平滑，默认是0.85,
  //             useLocalExtrema: true,  //使用局部极值
  //             latField: 'lat',   //维度
  //             lngField: 'lng',  //经度
  //             valueField: 'count',    //热力点的值
  //             gradient: {   "0.99": "rgba(255,0,0,1)",
  //                     "0.8": "rgba(255,255,0,1)",
  //                     "0.7": "rgba(0,255,0,1)",
  //                     "0.4": "rgba(0,255,255,1)",
  //                     "0": "rgba(0,0,255,1)"
  //                 },
  //         };
  //         osmb.heatmapLayer = new HeatmapOverlay(config);  //重新创建热力图对象
  //         osmb.map.addLayer(osmb.heatmapLayer);                 //将热力图图层添加在地图map对象上
  //         osmb.heatmapLayer.setData(heatmapData);
  // }

  osmb.setHeatMap = function(heatmapData){
          if(osmb.heatmapLayer != null){
              osmb.map.removeLayer(osmb.heatmapLayer);
          }
          var config = {  //热力图的配置项
              radius : osmb.radius,                         // 设置半径大小
              maxOpacity: .8,                               // 设置最大的不透明度
              scaleRadius: true,                            // 设置热力点是否平滑过渡
              useLocalExtrema: true,                        // 使用局部极值
              latField: 'lat',                              // 维度
              lngField: 'lng',                              // 经度
              valueField: 'count',                          // 热力点的值
              gradient: {   "0.99": "rgba(255,0,0,1)",
                      "0.8": "rgba(255,255,0,1)",
                      "0.7": "rgba(0,255,0,1)",
                      "0.4": "rgba(0,255,255,1)",
                      "0": "rgba(0,0,255,1)"
                  },
          };
          osmb.heatmapLayer = new HeatmapOverlay(config);    // 重新创建热力图对象
          osmb.map.addLayer(osmb.heatmapLayer);              //将热力图图层添加在地图map对象上
          osmb.heatmapLayer.setData(heatmapData);
          $('.dimmer').css('display','none');
  }

  osmb.getColor = function(index){
    var colorArr = ["#1C1C1C","#363636","	#4F4F4F","#696969","#828282","#9C9C9C","#B5B5B5","#CFCFCF","#E8E8E8"];
    return colorArr[9 - index];
  }

  osmb.clearMap = function(){
    var config = osmb.config;
    osmb.map.eachLayer((layer) => {
      layer.remove();
    })
    L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:config.map.maxZoom,minZoom:config.map.minZoom}).addTo(osmb.map);
  }

  osmb.conrect = function(num, len){
    if (num <= 0) {
      num = 0;
    }
    if (num >= len) {
      num = len - 1;
    }
    return num;
  }

  osmb.getNewCount = function(count){
    var arr = [10, 100, 500, 1000, 2000, 5000, 8000, 10000, 20000, 30000, 50000, 60000, 70000];
    for (var i = 0; i < arr.length; i++) {
      if(arr[i] > count){
        return i+1;
      }
    }
    return arr.length+1;
  }

  return osmb;

}
